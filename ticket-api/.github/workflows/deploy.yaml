name: Build and deploy Ticket System Application.

on:
  push:
    branches:
      - develop
      - main
      - DEVOPS-193
    tags:
      - v*
  pull_request:
    types: [ review_requested, edited, synchronize ]


jobs:
  setup_environment:
    runs-on: ubuntu-latest
    outputs:
      env_name: ${{ steps.get_env.outputs.environment }}
    env:
      GITHUB_REF: ${{ github.ref }}
    steps:
      - id: get_env
        run: |
          if grep -q "refs/tags/v" <<< ${{github.ref}} || grep -q "refs/heads/main" <<< ${{github.ref}}; then
            echo "environment=PROD" >> $GITHUB_OUTPUT
          else
            echo "environment=DEV" >> $GITHUB_OUTPUT
          fi
      - id: print_env
        name: Print environment
        run: echo  "Environment :- ${{ steps.get_env.outputs.environment }}"

  build_and_deploy:
    name: Build and deploy the meld api repository.
    runs-on: ubuntu-latest
    needs: setup_environment
    environment: ${{needs.setup_environment.outputs.env_name}}
    steps:
      - uses: actions/checkout@v2

      - name: Use golang ${{matrix.go-version}}
        uses: actions/setup-go@v2
        with:
          go-version: '^1.16'
      - run: go version

      - name: Set up MySQL
        run: |
          sudo systemctl start mysql
          mysql -e 'CREATE DATABASE meld;' -uroot -proot
          mysql -e "show databases;" -uroot -proot
      - name: Initialize the environment variables for testing
        run: |
          echo "ENVIRONMENT=local
          SERVER_PORT=8080
          DB_HOST=localhost
          DB_PORT=3306
          DB_NAME=meld
          DB_USER=root
          DB_PASSWORD=root
          DEBUG_PORT=5002     
          DB_TYPE=mysql
          ADMIN_EMAIL=${{secrets.ADMIN_EMAIL}}
          ADMIN_PASSWORD=${{secrets.ADMIN_PASSWORD}}
          STORAGE_BUCKET_NAME=${{secrets.STORAGE_BUCKET_NAME}}
          STRIPE_KEY=${{secrets.STRIPE_KEY}}
          RECAPTCHA_SECRET_KEY=${{secrets.RECAPTCHA_SECRET_KEY}}
          STRIPE_WEBHOOK_SECRET=${{secrets.STRIPE_WEBHOOK_SECRET}}
          TIMEZONE=${{secrets.TIMEZONE}}
          " > .env

      - name: Initialize service account key file
        run: |
          echo ${{secrets.FIREBASE_SERVICE_ACCOUNT_KEY_BASE64}} | base64 --decode > ./config/serviceAccountKey.json

      - name: Build the repository
        run: go build -tags=go_json main.go

      - name: Start the service
        run: |
          ./main app:serve &

      - name: Validate if the service is working or not via health check api
        run: |
          sleep 5
          curl http://localhost:8080/health-check

      - name: Initialize the environment variables with deployment env
        run: |
          rm -rf .env
          echo "ENVIRONMENT=${{secrets.ENVIRONMENT}}
          SERVER_PORT=8080
          DB_HOST=${{secrets.DB_HOST}}
          DB_PORT=${{secrets.DB_PORT}}
          DB_NAME=${{secrets.DB_NAME}}
          DB_USER=${{secrets.DB_USER}}
          DB_PASSWORD=${{secrets.DB_PASSWORD}}
          DB_TYPE=${{secrets.DB_TYPE}}
          ADMIN_EMAIL=${{secrets.ADMIN_EMAIL}}
          ADMIN_PASSWORD=${{secrets.ADMIN_PASSWORD}}
          STORAGE_BUCKET_NAME=${{secrets.STORAGE_BUCKET_NAME}}
          STRIPE_KEY=${{secrets.STRIPE_KEY}}
          STRIPE_WEBHOOK_SECRET=${{secrets.STRIPE_WEBHOOK_SECRET}}
          RECAPTCHA_SECRET_KEY=${{secrets.RECAPTCHA_SECRET_KEY}}
          TIMEZONE=${{secrets.TIMEZONE}}
          DEBUG_PORT=5002
          " > .env

      - name: Initialize service account key file
        run: |
          echo ${{secrets.FIREBASE_SERVICE_ACCOUNT_KEY_BASE64}} | base64 --decode > ./config/serviceAccountKey.json

      - name: Setup Cloud SDK
        if: ${{ github.event_name == 'push' && (github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/tags/v')) }}
        uses: google-github-actions/setup-gcloud@v0.2.0
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCLOUD_SERVICE_KEY }}

      - name: Deploy to Development App Engine
        if: ${{ github.event_name == 'push' && (github.ref == 'refs/heads/develop') }}
        run: gcloud app deploy dev.app.yaml --quiet --project ${{secrets.GCP_PROJECT_ID}}

      - name: Deploy to Production App Engine
        if: ${{ github.event_name == 'push' && (startsWith(github.ref, 'refs/tags/v')) }}
        run: gcloud app deploy prod.app.yaml --quiet --project ${{secrets.GCP_PROJECT_ID}}

      - name : Delete previous versions Development
        if: ${{ github.event_name == 'push' && (github.ref == 'refs/heads/develop') }}
        run: gcloud app versions list --project ${{secrets.GCP_PROJECT_ID}} --service="api-dev" --format="value(version.id)" --sort-by="~version.createTime" | tail -n +3 | xargs -r gcloud app versions delete --project ${{secrets.GCP_PROJECT_ID}} --service api-dev --quiet

      - name : Delete previous versions Production
        if: ${{ github.event_name == 'push' && (startsWith(github.ref, 'refs/tags/v')) }}
        run: gcloud app versions list --project ${{secrets.GCP_PROJECT_ID}} --service="api-prod" --format="value(version.id)" --sort-by="~version.createTime" | tail -n +3 | xargs -r gcloud app versions delete --project ${{secrets.GCP_PROJECT_ID}} --service api-prod --quiet


      - name: Slack Notification on SUCCESS
        if: success()
        uses: tokorom/action-slack-incoming-webhook@main
        env:
          INCOMING_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        with:
          text: A job for Meld API has succeeded :tada:.
          attachments: |
            [
              {
                "color": "good",
                "author_name": "${{ github.actor }}",
                "author_icon": "${{ github.event.sender.avatar_url }}",
                "fields": [
                  {
                    "title": "Commit Message",
                    "value": "${{ github.event.head_commit.message }}"
                  },
                  {
                    "title": "GitHub Actions URL",
                    "value": "${{ github.event.repository.url }}/actions/runs/${{ github.run_id }}"
                  },
                  {
                    "title": "Compare URL",
                    "value":  "${{ github.event.compare }}"
                  }
                ]
              }
            ]
      - name: Slack Notification on FAILURE
        if: failure()
        uses: tokorom/action-slack-incoming-webhook@main
        env:
          INCOMING_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        with:
          text: A build and *deploy job for Meld application has failed :crying_cat_face:.
          attachments: |
            [
              {
                "color": "danger",
                "author_name": "${{ github.actor }}",
                "author_icon": "${{ github.event.sender.avatar_url }}",
                "fields": [
                  {
                    "title": "Commit Message",
                    "value": "${{ github.event.head_commit.message }}"
                  },
                  {
                    "title": "GitHub Actions URL",
                    "value": "${{ github.event.repository.url }}/actions/runs/${{ github.run_id }}"
                  },
                  {
                    "title": "Compare URL",
                    "value":  "${{ github.event.compare }}"
                  }
                ]
              }
            ]